Linux用户组管理及用户权限

回顾：
   bash基础特性：命令补全、路径补全、命令应用
   文件或目录的复制、移动、删除
   变量：变量类型

   存储格式、数据范围、参与运算


 bash的基础特性：

     globbing:文件名通配

          匹配模式：元字符
              *：匹配任意长度的任意字符
                   pa*，   以pa开头的任意文件
                       pa,paa,passwd
                   *pa*,   文件名中包含pa
                   *pa     以pa接诶
                   *p*a*
              ?：匹配任意单个字符
                   pa? ??pa, p?a, p?a?
                        pa不符合 paa符合  passwd不符合
              []:匹配指定范围内的任意单个字符
                 有几种特殊格式：
                 [a-z]或[A-Z]：所有字母（范围通配时不区分字母大小写）
                 [0-9]:    0-9所有数字
                 [a-z0-9]:a到z,0到9(所有数字和字母)
                 [abcxyz]: a，b，c，x，y，z中的任意单个字符
                 [[:upper:]]: 所有大写字母
                 [[:lower:]]: 所有小写字母
                 [[:alpha:]]: 所有字母
                 [[:digit:]]: 所有数字
                 [[:alnum:]]: 所有的字母和数字
                 [[:space:]]: 所有空白字符
                 [[:punct:]]: 所有标点符号

                  pa[0-9][0-9],2[0-9][-9]

              [^]:匹配指定范围外的任意单个字符
                  [^[:upper:]]   匹配非大写字母以外的任意单个字符
                  [^0-9]         匹配数字以外的任意单个字符（非数字字符）
                  [^[:alnum:]]   匹配字母和数字以外的任意单个字符（例如空白符合标点）

         练习1：显示/var目录所有以l开头，以一个小写字母结尾，且中间出现一位任意字符的文件或目录；

			[root@bogon ~]# ls -d /var/l?[[:lower:]]
			/var/lib  /var/log

         练习2：显示/etc目录下，以任意一位数字开头，且以非数字结尾的文件或目录；

			[root@localhost ~]# touch /etc/3ab23y     （没有符合条件的文件或目录，为了验证我们创建一个符合条件的文件）
			[root@localhost ~]# ls /etc/[0-9]*[^0-9]
			/etc/3ab23y

         练习3：显示/etc目录下，以非字母开头，后面跟了一个字母及其他任意长度任意字符的文件或目录；

			[root@localhost ~]# touch /etc/8eabc
			[root@localhost ~]# ls /etc/[^a-z][a-z]*
			/etc/8eabc


         练习4：复制/etc目录下，所有以m开头，以非数字结尾的文件或目录至/tmp/mageedu.com目录；

			[root@localhost ~]# mkdir /tmp/mageedu.com
			[root@localhost ~]# cp -r /etc/m*[^0-9] /tmp/mageedu.com
			[root@localhost ~]# ls /tmp/mageedu.com/
			machine-id  mail.rc                   man_db.conf  mke2fs.conf  modules-load.d  mtab         multipath  my.cnf.d
			magic       makedumpfile.conf.sample  maven        modprobe.d   motd            mtools.conf  my.cnf


         练习5：复制/urs/share/man目录下，所有以man开头，后面跟一个数字结尾的文件或目录至/tmp/man目录下；

			[root@localhost ~]# mkdir /tmp/man
			[root@localhost ~]# cp -r /usr/share/man/man*[0-9] /tmp/man
			[root@localhost ~]# ls -d/tmp/man
			[root@localhost ~]# ls -d /tmp/man/man[0-9]
			/tmp/man/man1  /tmp/man/man2  /tmp/man/man3  /tmp/man/man4  /tmp/man/man5  /tmp/man/man6  /tmp/man/man7  /tmp/man/man8  /tmp/man/man9
			[root@localhost ~]# du -sh /tmp/man                   /查看 /tmp/man目录下的文件大小
			44M	/tmp/man                                       


         练习6：复制/etc目录下，所有以.conf结尾，且以m,n,r,p开头的文件或目录至/tmp/conf.d/目录下；

			[root@localhost ~]# mkdir /tmp/conf.d
			[root@localhost ~]# ls -d /etc/[mnrp]*.conf
			/etc/man_db.conf  /etc/nfs.conf       /etc/ntp.conf      /etc/pnm2ppa.conf      /etc/resolv.conf
			/etc/mke2fs.conf  /etc/nfsmount.conf  /etc/numad.conf    /etc/radvd.conf        /etc/rsyncd.conf
			/etc/mtools.conf  /etc/nsswitch.conf  /etc/pbm2ppa.conf  /etc/request-key.conf  /etc/rsyslog.conf
			[root@localhost ~]# cp -r /etc/[mnrp]*.conf /tmp/conf.d/
			[root@localhost ~]# ls /tmp/conf.d/
			man_db.conf  mtools.conf  nfsmount.conf  ntp.conf    pbm2ppa.conf  radvd.conf        resolv.conf  rsyslog.conf
			mke2fs.conf  nfs.conf     nsswitch.conf  numad.conf  pnm2ppa.conf  request-key.conf  rsyncd.conf


IO重定向及管道

     程序：由 指令+数据 组成

            程序： IO  

            可用于输入的设备：文件   （一切皆文件）
                  键盘设备，文件系统上的常规文件、网卡等；
            可用于输出的设备：文件   （一切皆文件）
                  显示器、文件系统上的常规文件、网卡等；

            程序的数据流有三种：
                输入的数据流：<--标准输入（stain)，键盘   standard input
                输出的数据流：-->标准输出（stdout）,显示器
                错误输出流： -->错误输出（stderr）,显示器             程序的解释器辅助产生的数据流，例如shell


            fd: file descriptor,文件描述符  --
                 标准输入：0
                 标准输出：1
                 错误输出：2

       IO重定向：

             输出重定向：>
                  特性：覆盖输出 （直接覆盖重定向的文件）

		[root@bogon ~]# cat /etc/issue
		\S
		Kernel \r on an \m

		[root@bogon ~]# cat /etc/issue > /tmp/issue.out
		[root@bogon ~]# cat /tmp/issue.out
		\S
		Kernel \r on an \m

             输出重定向：>>
                  特性：追加输出 （追加到文件尾部）



         # set -C          （仅对当前shell进程有效）
             禁止覆盖输出重定向至已存在的文件；
             此时可使用强制覆盖输出：>|
         # set +C
             关闭上述特性

         错误输出流重定向： 2>, 2>>

         合并正常输出流和错误输出流;
             (1)&>, &>>
             (2)COMMAND > /path/to/somefile 2>&1      将正常输出定向到一个位置，把错误输出定向到正常输出上，即可实现合并正常输出流和错误输出流
                COMMAND >> /path/to/somefile 2>&1     

            特殊设备： /dev/null
                   用法: ... &> /dev/null     通常在只关心状态结果的时候，将命令正常标准输出结果重定向给/dev/null 丢弃 （echo $?  查看状态结果：0为成功，1-255为失败）
                                               常用于shell脚本编程，判断情景
            


        
        输入重定向： <

        tr命令：
          tr [OPTION]... SET1 [SET2]
                把输入的数据当中的字符，凡是在SET1定义范围内出现的，通通对位转换为SET2出现的字符
             
             用法1：

              tr SET1 SET2 < /PATH/FROM/SOMEFILE

             用法2：

              tr -d SET1 < /PATH/FROM/SOMEFILE             /凡是在SET1中定义范围出现的，全部删除

                      注意：tr命令不会修改源文件

              
              举例： tr abc ABC

				1、	
				    [root@bogon ~]# tr [a-z] [A-Z]
					how are you
					HOW ARE YOU
					i love you
					I LOVE YOU
					^C
					[root@bogon ~]# tr [a-z] [A-Z] < /etc/issue
					\S
					KERNEL \R ON AN \M
			   
			   2、
					[root@bogon ~]# cat /etc/issue
					\S
					Kernel \r on an \m

					[root@bogon ~]# tr -d [a-z] < /etc/issue        /删掉所有小写字母输出到标准输出
					\S
					K \   \

             
             Here Document: <<    (此处创建文档)

                       cat << EOF                               /我们使用EOF当做结束符
                       cat > /PATH/TO/SOMEFILE <<EOF
            
            example:
					[root@bogon ~]# cat << EOF
					> how are you
					> how do you do
					> EOF
					how are you
					how do you do
					[root@bogon ~]# cat > /tmp/cat.out << END
					> how are you
					> what are you doing
					> END
					[root@bogon ~]# cat /tmp/cat.out 
					how are you
					what are you doing

					[root@bogon ~]# cat << EOF >/tmp/cat.out.2
					> hello
					> thank you
					> are you ok
					> EOF
					[root@bogon ~]# cat /tmp/cat.out.2 
					hello
					thank you
					are you ok


              管道:  连接程序，实现将前一个命令的输出直接定向到后一个程序当做输入，可实现多级连接（把前一个程序的输出当做后一个命令的输入，可以增加多个）

                   COMMAND1 | COMMAND2 | COMMAND3 | ...

		example:			
				1、	[root@bogon ~]# cat /etc/issue | tr 'a-z' 'A-Z'
					\S
					KERNEL \R ON AN \M


				2、	[root@bogon ~]# who
					root     tty1         2019-04-09 19:51
					root     pts/0        2019-04-09 16:17 (192.168.220.1)
					root     pts/1        2019-04-09 19:20 (192.168.220.1)
					root     pts/2        2019-04-09 19:51 (192.168.220.1)
					[root@bogon ~]# who | head -2
					root     tty1         2019-04-09 19:51
					root     pts/0        2019-04-09 16:17 (192.168.220.1)
					[root@bogon ~]# who | head -2 | tr 'a-z' 'A-Z'
					ROOT     TTY1         2019-04-09 19:51
					ROOT     PTS/0        2019-04-09 16:17 (192.168.220.1)
					[root@bogon ~]# who | head -2 | tr 'a-z' 'A-Z' | tr -d '0-9'
					ROOT     TTY         -- :
					ROOT     PTS/        -- : (...)

Linux哲学思想，组合小程序完成复杂任务
            
              tee命令：

                    tee - read from standard input and write to standard output and files
                          从标准输入读文件产生标准输出，同时将输出保存到指明的文件中

                    COMMAND | tee /PATH/TO/SOMEFILE
             
             example:
					[root@bogon ~]# cat /etc/issue | tee /tmp/issue.tee | tr 'a-z' 'A-Z'
					\S
					KERNEL \R ON AN \M

					[root@bogon ~]# cat /tmp/issue.tee 
					\S
					Kernel \r on an \m


        练习1：把/etc/paswd文件的前6行信息转换为大写字符后输出
                    
	[root@bogon ~]# head -6 /etc/passwd |tr 'a-z' 'A-Z'
	ROOT:X:0:0:ROOT:/ROOT:/BIN/BASH
	BIN:X:1:1:BIN:/BIN:/SBIN/NOLOGIN
	DAEMON:X:2:2:DAEMON:/SBIN:/SBIN/NOLOGIN
	ADM:X:3:4:ADM:/VAR/ADM:/SBIN/NOLOGIN
	LP:X:4:7:LP:/VAR/SPOOL/LPD:/SBIN/NOLOGIN
	SYNC:X:5:0:SYNC:/SBIN:/BIN/SYNC

     

     命令总结： tr,tee   
    


用户、组和权限管理

   
早期计算机：
     Multi-task,Multi-Users  

     每个使用者者：
          用户标识、密码；                      Linux下的用户标识：用户名
              认证：Authentication
              授权：Authorization
              审计：Audition(Account)

                       ------ 3A


       组：用户组，用户容器
       
     用户类别：
          1、管理用户
          2、普通用户
              a.系统用户
              b.登录用户
      
      用户标识：UserID,UID
            16bits二进制数字：0+65535
                  管理员：0
                  普通用户：1-65535
                        系统用户：1-499（CentOS6）,1-999(CentOS7)
                        登录用户：500-60000（CentOS6）,10000-60000(CentOS7)

            名称解析：名称转换
                Username <--> UID 

                根据名称解析库进行: /etc/passwd

      组类别：
          管理员组
          普通用户组
              系统组
              登录组

       组标识：GroupID,GID
                  管理员组：0
                  普通用户组：1-65535
                        系统用户组：1-499（CentOS6）,1-999(CentOS7)
                        登录用户组：500-60000（CentOS6）,10000-60000(CentOS7)   

            名称解析：groupname <--> GID
                解析库： /et/group

            组类别2：
                用户的基本组：primay group （主组）
                用户的附加组

            组类别3：
                私有组：组名同用户名且只包含一个用户；privite group
                公共组：组内包含了多个用户；public group


       认证信息：
           通过比对事先存储的，与登录时提供的信息是否一致；
           password:
                /etc/shadow     用户密码
                /etc/gshadow    组密码

           密码的使用策略
               1：使用随机密码：
               2：最短长度不要低于8位
               3：应该使用大写字母，小写字母、数字和标点符号四类字符中至少三类
               4：定期更换

           密码存储格式：单向加密，并借助于salt完成


           加密算法：
               对称加密：加密和解密使用同一个秘钥
               非对称加密：加密和解密使用的一对儿秘钥；
                    秘钥对儿：  
                      公钥:public key
                      私钥:privita key
               单向加密：只能加密，不能解密;提取数据特征码；
                    定长输出
                    雪崩效应
                    
                    算法：
                         md5: message digest, 128bits
                         sha: secure hash algorithm,160bits 安全的哈希算法
                         sha224
                         sha256
                         sha384
                         sha512

                  在计算只是加salt，添加的随机数




		example
				[root@localhost ~]# echo "how are you" | md5sum 
				5ea0b7cb299e8c26b2d9c87039f5e7ad  -
				[root@localhost ~]# echo "how are you." | md5sum 
				5bd65df962ddf52bc545606a44959778  -
				[root@localhost ~]# echo "how are you?" | md5sum 
				ce55c98ac24d4c7764877fa58ab441ef  -
				[root@localhost ~]# echo "how are you?" | sha
				sha1sum    sha224sum  sha256sum  sha384sum  sha512sum  sharesec   
				[root@localhost ~]# echo "how are you?" | sha512sum 
				ac96798efe19e41490484ba4b8fd611ab2fb2803d35b8e23b4e0c24a773ca90229aae60304a4ded7066389d7997038789d13ab63058dec0c1e2ebd76cd92afc5  -
				[root@localhost ~]# echo "how are you." | sha512sum 
				8b9f6311559dbe47be9b2a29bfde1c7d1b3dafec1f12a7e20c47b94bb80152176c4086ccdc0b0cf814585d6dd6ef0fa0615b2a26b1c334863fe2bc6ffc51d719  -
				[root@localhost ~]# echo "how are you.fdfsfswgwergsdwrwrqrqwrqrqwrwgdghetbbthgse" | sha512sum 
				e956c209ffcb1faa0bb52d065eddea23acf09dd4374514b0636d7b0ef3f1abc1800af6e5a55af556d96a6eda474efe414e2fe8160aa4b86da45ad227f82bba66  -


              /etc/passwd:    用户信息库
                     name:password:UID:GID:GECOS:directory:shell

                     name: 用户名
                     password: 可以是加密的密码，也可是占位符
                     UID：
                     GID： 用户所属的主组的ID号；
                     GECOS： 用户的注释信息，可选
                     directory: 用户的家目录；
                     shell: 用户的默认shell,登录时默认shell程序

              /etc/shadow: 用户密码
                    用户名:加密的密码:最近一次修改密码的时间:密码最短使用期限:最长使用期限:警告期段:过期期限:保留字段

                    查看帮助文档：man 5 shadow


              /etc/group:组的信息库
                   group_name:password:GID:user_list

                           user_list:该组的用户成员；以此组为附加组的用户的用户列表：

          相关命令：useradd,userdel,usermod,passwd,groupadd,groupdel,groupmod,gpasswd,chage,chsh,id,su





Linux用户和组管理


     groupadd命令： 添加组

       安全上下文：
          进程以其发起者的身份运行；
              进程对文件的访问权限，取决于发起此进程的用户的权限；

       系统用户：为了能够让后台进程或服务类进程以非管理员身份运行，通常需要为此创建多个普通用户，这类用户从不登录系统

          groupadd [选项] group_name

            -g GID: 指定GID；如不指定会默认，上一个组的GID+1
            -r:创建系统组；
                      
     groupmod命令： 修改组属性
            -g GID, 修改GID
            -n new_name: 修改组名

		example.
				[root@localhost ~]# tail -2 /etc/group
				mygrp:x:1005:
				testgrp:x:981:
				[root@localhost ~]# groupmod -g 123 testgrp
				[root@localhost ~]# tail -2 /etc/group
				mygrp:x:1005:
				testgrp:x:123:
				[root@localhost ~]# groupmod -n test1grp testgrp
				mygrp:x:1005:
				test1grp:x:123:



     groupdel命令： 删除组

          groupdel [选项] GROUP


     useradd命令： 添加用户

          useradd [选项] 登录名
              -u, --uid UID: 指定UID；如不指定默认为上一个UID+1
              -g, --gid GROUP：指定用户基本组ID或组名，此组得事先存在
			  -G, --groups GROUP1[,GROUP2,...[,GROUPN]]]: 指定用户所属的附加组（可以是组ID也可以是组名），多个组之间用逗号分隔；
			  -c, --comment COMMENT：指明注释信息
				           任何字符串。通常是关于登录的简短描述，当前用于用户全名。
              -d, --home HOME_DIR:以指定的路径作为用户的家目录：通过复制/etc/skel此目录并重命名实现；指定的家目录路径如果事先存在，则不会为用户复制环境配置文件
              -s, --shell SHELL: 指定用户的默认shell,可用的所有shell列表存储在/etc/shells文件中；
              -r，创建一个系统用户
              -M, --no-create-home    不创建用户主目录，即使系统在 /etc/login.defs中的设置(CREATE_HOME)为yes
                    Do not create the user's home directory, even if the system wide setting from /etc/login.defs (CREATE_HOME) is set to yes.
              -f, --inactive INACTIVE
                       密码过期到账户被禁用之前的天数。0表示立即禁用，-1表示禁用这个功能
                                      如果未指定，useradd将使用在 /etc/default/useradd 中 INACTIVE 变量指定的默认禁用周期，或者默认为-1.

			注意：创建用户是的诸多默认设定配置文件为/etc/login.defs
			      -d选项指定家目录时，家目录的父目录需要事先存在，例如指定家目录为/users/username   父目录/users需事先存在（被创建）

			useradd -D:显示创建用户的默认配置；
			useradd -D 选项：修改默认选项的值；

			        修改的结果保存于/etc/default/useradd文件中；也可以通过直接编辑此文件实现
			        
			        [root@bogon ~]# cat /etc/default/useradd 
					# useradd defaults file
					GROUP=100
					HOME=/home
					INACTIVE=-1
					EXPIRE=
					SHELL=/bin/bash
					SKEL=/etc/skel
					CREATE_MAIL_SPOOL=yes             



example
	-g		
	        [root@localhost ~]# tail -2 /etc/group
			docker:x:5002:
			openstack:x:3000:
			[root@localhost ~]# useradd k8s -g 5002
			[root@localhost ~]# tail -2 /etc/group
			docker:x:5002:
			openstack:x:3000:
			[root@localhost ~]# tail -2 /etc/passwd
			openstack:x:3000:3000::/home/openstack:/bin/bash
			k8s:x:5003:5002::/home/k8s:/bin/bash
			[root@localhost ~]# useradd dockeruser1 -g docker 
			[root@localhost ~]# tail -2 /etc/passwd
			k8s:x:5003:5002::/home/k8s:/bin/bash
			dockeruser1:x:5004:5002::/home/dockeruser1:/bin/bash

    -c
			[root@localhost ~]# useradd -c "MogileFS DFS" mogilefs
			[root@localhost ~]# tail -1 /etc/passwd
			mogilefs:x:5005:5005:MogileFS DFS:/home/mogilefs:/bin/bash
        
    -G
			[root@localhost ~]# tail /etc/group
			jacky:x:1000:
			gentoo:x:1001:
			slackware:x:1002:
			jack:x:1003:tom
			tom:x:1004:
			mygrp:x:1005:
			test1grp:x:123:
			docker:x:5002:
			openstack:x:3000:
			mogilefs:x:5005:
			[root@localhost ~]# useradd -G mygrp archlinux
			[root@localhost ~]# tail -1 /etc/passwd
			archlinux:x:5006:5006::/home/archlinux:/bin/bash
			[root@localhost ~]# tail /etc/group
			gentoo:x:1001:
			slackware:x:1002:
			jack:x:1003:tom
			tom:x:1004:
			mygrp:x:1005:archlinux
			test1grp:x:123:
			docker:x:5002:
			openstack:x:3000:
			mogilefs:x:5005:
			archlinux:x:5006:
			[root@localhost ~]# 
    -d
			[root@localhost ~]# setenforce 0                                             //临时将selinux临时调整为允许模式（相当于临时关闭selinux防火墙功能）
			[root@localhost ~]# useradd -d /tmp/arvin  arvin
			[root@localhost ~]# tail -1 /etc/passwd
			arvin:x:5008:5008::/tmp/arvin:/bin/bash
			[root@localhost ~]# ls -la /tmp/arvin/
			总用量 16
			drwx------.  3 arvin arvin   78 4月  15 18:36 .
			drwxrwxrwt. 30 root  root  4096 4月  15 18:37 ..
			-rw-r--r--.  1 arvin arvin   18 8月   3 2017 .bash_logout
			-rw-r--r--.  1 arvin arvin  193 8月   3 2017 .bash_profile
			-rw-r--r--.  1 arvin arvin  231 8月   3 2017 .bashrc
			drwxr-xr-x.  4 arvin arvin   39 3月  19 14:25 .mozilla

			[root@localhost ~]# mkdir /tmp/mytest
			[root@localhost ~]# useradd -d /tmp/mytest mytest
			useradd：警告：此主目录已经存在。
			不从 skel 目录里向其中复制任何文件。
			[root@localhost ~]# ls -la /tmp/mytest/
			总用量 4
			drwxr-xr-x.  2 root root    6 4月  15 18:40 .
			drwxrwxrwt. 31 root root 4096 4月  15 18:41 ..
			[root@localhost ~]# ls -la /etc/skel/
			总用量 24
			drwxr-xr-x.   3 root root   78 3月  19 14:25 .
			drwxr-xr-x. 143 root root 8192 4月  15 18:41 ..
			-rw-r--r--.   1 root root   18 8月   3 2017 .bash_logout
			-rw-r--r--.   1 root root  193 8月   3 2017 .bash_profile
			-rw-r--r--.   1 root root  231 8月   3 2017 .bashrc
			drwxr-xr-x.   4 root root   39 3月  19 14:25 .mozilla
   
      -s
			[root@bogon ~]# cat /etc/shells 
			/bin/sh
			/bin/bash
			/sbin/nologin
			/usr/bin/sh
			/usr/bin/bash
			/usr/sbin/nologin
			/bin/tcsh
			/bin/csh
			[root@bogon ~]# useradd -s /bin/csh keystone
			[root@bogon ~]# tail -1 /etc/passwd
			keystone:x:5010:5010::/home/keystone:/bin/csh


   



      usermod命令   修改用户属性

               usermod [选项] 登录名
                 -u，--uid UID: 修改用户的ID为此处指定的新的UID;
                 -g, --gidGROUP:  修改用户所属的基本组；此组必须存在;
                 -G, --groupsGROUP1[,GROUP2,...[,GROUPN]]]: 修改用户所属的附加组；原来的附加组会被覆盖；
                 -a, --append: 与-G一同使用，用于为用户追加新的附加组;  -aG
                 -c, --comment COMMENT: 修改注释信息；
                 -d, --home HOME_DIR: 修改用户的家目录: 用户原有的文件不会被转移至新位置;
                 -m, --move-home： 只能与-d选项一同使用，用于将原来的家目录里面的所有文件移动到新的家目录，目前的家目录路径必须存在，否则新家目录不会被创建;
                 -l, --login NEW_LOGIN:修改用户名;
                 -s, --shell SHELL：修改用户的默认shell;
                 -L，--lock:锁定用户密码；即在用户原来的密码字符串之前添加一个"!";
                 -U，--unlock:解锁用户的密码;

      userdel命令

               userdel [选项] 登录名
                  -r： 删除用户是一并删除其家目录


           练习1：创建用户gentoo,UID为4001，基本组为gentoo,附加组为disro(GID为5000)和peguin(GID为5001)；

			[root@bogon ~]# groupadd -g 5000 distro
			[root@bogon ~]# groupadd -g 5001 peguin
			[root@bogon ~]# useradd -u 4001 -G 5000,5001 gentoo
			[root@bogon ~]# tail -2 /etc/passwd
			keystone:x:5010:5010::/home/keystone:/bin/csh
			gentoo:x:4001:4001::/home/gentoo:/bin/bash
			[root@bogon ~]# tail -5 /etc/group
			mytest:x:5009:
			keystone:x:5010:
			distro:x:5000:gentoo
			peguin:x:5001:gentoo
			gentoo:x:4001:


           练习2：创建用户fedora,其注释信息为"Fedora Core",默认shell为bin/tcsh;

			[root@bogon ~]# useradd -c "Fedora Core" -s /bin/tcsh fedora
			[root@bogon ~]# tail -2 /etc/passwd
			gentoo:x:4001:4001::/home/gentoo:/bin/bash
			fedora:x:5011:5011:Fedora Core:/home/fedora:/bin/tcsh


           练习3：修改gentoo用户的家目录为/var/tmp/gentoo;要求其原有文件仍能被用户访问；

			[root@bogon ~]# usermod -md /var/tmp/gentoo gentoo
			[root@bogon ~]# tail -2 /etc/passwd
			gentoo:x:4001:4001::/var/tmp/gentoo:/bin/bash
			fedora:x:5011:5011:Fedora Core:/home/fedora:/bin/tcsh

           练习4：为gentoo新增附加组netadmin;

			[root@bogon ~]# groupadd netadmin
			[root@bogon ~]# usermod -aG netadmin gentoo
			[root@bogon ~]# tail /etc/group
			archlinux:x:5006:
			moosefs:x:5007:
			arvin:x:5008:
			mytest:x:5009:
			keystone:x:5010:
			distro:x:5000:gentoo
			peguin:x:5001:gentoo
			gentoo:x:4001:
			fedora:x:5011:
			netadmin:x:5012:gentoo

      passwd命令：
             
              passwd [-k] [-l] [-u [-f]] [-d] [-e] [-n mindays] [-x maxdays] [-w warndays] [-i inactivedays] [-S] [--stdin] [username]

              （1）passwd:修改用户自己的密码;
              （2）passwd USERNAME:修改指定用户的密码，但默认情况下仅root有此权限;

                 -l,-u： 锁定和解锁用户密码
                 -d：删除用户密码
                 -e DATE: 过期期限，日期
                 -i DAYS: 非活动期限;密码过期之后还能活动几天
                 -n DAYS: 密码的最短使用期限
                 -x DAYS: 密码的最长使用期限
                 -w DAYS: 警告期限

                 --stdin:
                     echo "PASSWORD" | passwd --stdin USERNAME
     
      gpasswd命令：
            
            组密码文件： /etc/gshadow

          gpasswd [选项] group

              （1）gpasswd group: 修改指定组的密码，默认情况下组创建之后没有密码，设定密码主要用途在用newgrp命令临时切换用户到某个组作为自己的基本组时使用，如果用户实现不属于该组，切该组没有设定密码，用户将无法切换到此没有设定密码的组
                -a USERNAME:向组中添加用户
                -d USERNAME:从组中移除用户
          
          newgrp命令：临时切换指定的组为基本组；

                newgrp [-] [group]
                   -：会模拟用户重新登录以实现重新初始化其工作环境：
            
      chage命令：
                chage - 更改用户密码过期信息

             chage [选项] 登录名

                 -d
                 -E
                 -W
                 -M
                 -m

       id命令：显示用户的真实和有效ID

          id - print real and effective user and group IDs

               id [OPTION]... [USER]
                 -u: 仅显示有效的UID
                 -g: 仅显示用户的基本组ID
                 -G: 显示用户所属的所有组的ID，包括基本组和附加组
                 -n: 显示名字而非ID

        su命令:  switch user

               登录式切换：会通过读取目标用户的配置文件来重新初始化
               		su - USERNAME
               		su -l USERNAME

               非登陆式切换：不会读取目标用户的配置文件进行初始化
                    su USERNAME

               注意：管理员（root）可无密码切换至其他任何用户；

               -c 'COMMAND': 仅以指定用户的身份运行此处指定的命令；运行一次之后直接退回

       其它几个命令：
       chsh，  更改默认shell
       chfn,finger  更改finger信息，显示finger信息
       whoami
       pwck,检查用户密码
       grpck,检查组

       命令总结：groupadd,groupmod,groupdel,useradd,usermod,userdel,passwd,gpasswd,newgrp,id,su,chage...



       权限管理：

            ls -l
                rwxrwxrwx:
                    左三位：定义user(owner)的权限
                    中三位：定义group的权限
                    右三位：定义other的权限



             进程安全上下文:
                 进程对文件的访问权限应用模型:
                     进程的属主（进程发起者）与文件的属主是否相同；如相同，则引用属主权限
                     否则，则检查进程的属主是否属于文件的属组；如果是，则应用属56.=组权限；
                     否则，就只能应用other的权限；
             
             权限：
                 r:readable，可读
                 w:writeable,可写
                 x:excuteable,可Z执行

                 文件：
                     r:可获取文件的数据
                     w:可修改文件的数据
                     x:可将此文件发起运行为进程  

                 目录：
                     r:可使用ls命令获取其下的所有文件列表;(不能获取详细信息，即不包括ls -l)
                     w:可修改此目录下的文件列表：即创建或删除文件；
                     x:可cd至此目录中，且可使用ls -l来获取所有文件的详细属性信息；

                 mode(模型)： rwxrwxrwx
                 ownership(从属关系):user,group

              权限组合机制：
                  --- 000 0       没有权限  0
                  --x 001 1       可执行    1
                  -w- 010 2       可写      2
                  -wx 011 3
                  r-- 100 4       可读      4
                  r-x 101 5
                  rw- 110 6
                  rwx 111 7

                  rxwrwxrwx----777    八进制权限表示法

             练习  
                   rw-rw-r--   664
                   rwxrwxr-x   775
                   rwxr-x---   750
                   rw-------   600
                   rwxr-xrx-   756

              
        权限管理命令
           
            chmod命令   
                   chmod - change file mode bits

					chmod [OPTION]... MODE[,MODE]... FILE...
					chmod [OPTION]... OCTAL-MODE FILE...
					chmod [OPTION]... --reference=RFILE FILE...
                 
                 三类用户：
                      u:属主
                      g:属组
                      o:其他
                      a:所有

				（1）chmod [OPTION]... MODE[,MODE]... FILE...

				       MODE表示法：

				               A、赋权表示法：直接赋予用户对应权限，可以操作一类用户的所有权限位，
				                  u=
				                  g=
				                  o=
				                  a=
				                  两种用户可以合并书写：ug=，uo=，go=,
				                  权限可合并书写，r,w,x,rw,rwx,rx,wx,

				               B、授权表示法：直接增加或删除一类用户的现有权限r,w,x;
				                  u+,u-
				                  g+,g-
				                  o+,o-
				                  a+,a-                 (有时候可省略a,直接写成+,-)
				                  
				                  两种用户可以合并书写：ug=，uo=，go=,
				                  权限也可合并书写，r,w,x,rw,rwx,rx,wx,
				                  尽量符合逻辑书写，不符合逻辑也不会报错（例如其他用户没有w权限用o-x也不会报错）
				                  分别加不同权限时可以用逗号隔开，如：chmod u+w,g+r FILE
				                  
                                  ps:全局+w操作只会匹配到u（属主用户）

				  (2)八进制表示法
				      chmod [OPTION]... OCTAL-MODE FILE...

				      example:
				            chmod 660 /etc/shadow

				  (3)引用权限命令
				       chmod [OPTION]... --reference=RFILE FILE...      
				     修改文件FILE的权限与被引用的文件RFILE的权限相同

				  选项 ：
				      -R,--recurisive:递归修改，会将目录以及目录下的子目录和所有文件一起修改  （此选项只建议授权表示法使用，避免影响目录内部的文件拥有其他不需要的权限，例如错误的将x权限给不可执行的文件）

			         注意：用户仅能修改属主为自己的那些文件的权限       

		exmaple.				赋权表示
								[root@bogon ~]# ls
								00-02-17  a_c  a_d  anaconda-ks.cfg  b_c  b_d  Desktop  Documents  Downloads  Music  Pictures  Public  Templates  Videos  桌面
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rw-------. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod g=rw anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rw-rw----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod ug=r anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-r--r-----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod a=rwx anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rwxrwxrwx. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod u=rwx,g=rw,o= anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rwxrw----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg

								授权表示
								[root@bogon ~]# ll anaconda-ks.cfg 
								----------. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod u+w anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								--w-------. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod ug+r anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rw-r-----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod a+x anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rwxr-x--x. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod -x anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rw-r-----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod u-w anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-r--r-----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg
								[root@bogon ~]# chmod +w anaconda-ks.cfg 
								[root@bogon ~]# ll anaconda-ks.cfg 
								-rw-r-----. 1 root root 1257 3月  19 19:05 anaconda-ks.cfg            //全局+w操作只会匹配到u（属主用户），因为全局+w很危险

								权限引用
								[root@bogon tmp]# ll | head -3
								总用量 276
								-rw-r--r--. 1 root root      0 4月  19 19:16 a
								-rw-r--r--. 1 root root      0 4月  19 19:16 b
								[root@bogon tmp]# chmod 766 a
								[root@bogon tmp]# ll | head -3
								总用量 276
								-rwxrw-rw-. 1 root root      0 4月  19 19:16 a
								-rw-r--r--. 1 root root      0 4月  19 19:16 b
								[root@bogon tmp]# chmod --reference=a b
								[root@bogon tmp]# ll | head -3
								总用量 276
								-rwxrw-rw-. 1 root root      0 4月  19 19:16 a
								-rwxrw-rw-. 1 root root      0 4月  19 19:16 b

								-R选项	
								root@bogon tmp]# ls -la skel
								总用量 16
								drwxr-xr-x.  3 root root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root root 4096 4月  19 19:43 ..
								-rw-r--r--.  1 root root   18 4月  19 19:43 .bash_logout
								-rw-r--r--.  1 root root  193 4月  19 19:43 .bash_profile
								-rw-r--r--.  1 root root  231 4月  19 19:43 .bashrc
								drwxr-xr-x.  4 root root   39 4月  19 19:43 .mozilla
								[root@bogon tmp]# chmod -R go= skel
								[root@bogon tmp]# ls -la skel
								总用量 16
								drwx------.  3 root root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root root 4096 4月  19 19:43 ..
								-rw-------.  1 root root   18 4月  19 19:43 .bash_logout
								-rw-------.  1 root root  193 4月  19 19:43 .bash_profile
								-rw-------.  1 root root  231 4月  19 19:43 .bashrc
								drwx------.  4 root root   39 4月  19 19:43 .mozilla
								[root@bogon tmp]# chmod -R g+r skel/
								[root@bogon tmp]# ls -la skel
								总用量 16
								drwxr-----.  3 root root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root root 4096 4月  19 19:45 ..
								-rw-r-----.  1 root root   18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 root root  193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 root root  231 4月  19 19:43 .bashrc
								drwxr-----.  4 root root   39 4月  19 19:43 .mozilla


          从属关系管理命令：chown,chgrp             ----(仅管理员可修改文件的属主和属组)

                 chown命令：    既能修改属主也能修改属组

						chown [OPTION]... [OWNER][:[GROUP]] FILE...         //修改属主
						chown [OPTION]... --reference=RFILE FILE...         //引用（参考修改）
                   
                    选项：
                        -R:递归修改                   

                 chgrp命令：    只能用于修改属组

						chgrp [OPTION]... GROUP FILE...
						chgrp [OPTION]... --reference=RFILE FILE...

 

                    exmple.     修改属主
								root@bogon tmp]# ls -la skel
								总用量 16
								drwxr-----.  3 root root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root root 4096 4月  19 19:45 ..
								-rw-r-----.  1 root root   18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 root root  193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 root root  231 4月  19 19:43 .bashrc
								drwxr-----.  4 root root   39 4月  19 19:43 .mozilla
								[root@bogon tmp]# chown -R docker skel          
								[root@bogon tmp]# ll -d skel
								drwxr-----. 3 docker root 78 4月  19 19:43 skel
								[root@bogon tmp]# ll -a skel
								总用量 16
								drwxr-----.  3 docker root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root   root 4096 4月  19 19:45 ..
								-rw-r-----.  1 docker root   18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 docker root  193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 docker root  231 4月  19 19:43 .bashrc
								drwxr-----.  4 docker root   39 4月  19 19:43 .mozilla

								修改属主和属组
								[root@bogon tmp]# ll -a skel/
								总用量 16
								drwxr-----.  3 docker root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root   root 4096 4月  19 19:55 ..
								-rw-r-----.  1 docker root   18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 docker root  193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 docker root  231 4月  19 19:43 .bashrc
								drwxr-----.  4 docker root   39 4月  19 19:43 .mozilla
								[root@bogon tmp]# chown -R jacky:docker skel/
								[root@bogon tmp]# ll -a skel/
								总用量 16
								drwxr-----.  3 jacky docker   78 4月  19 19:43 .
								drwxrwxrwt. 24 root  root   4096 4月  19 19:57 ..
								-rw-r-----.  1 jacky docker   18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 jacky docker  193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 jacky docker  231 4月  19 19:43 .bashrc
								drwxr-----.  4 jacky docker   39 4月  19 19:43 .mozilla
								[root@bogon tmp]# chown -R root.root skel/
								[root@bogon tmp]# ll -a skel/
								总用量 16
								drwxr-----.  3 root root   78 4月  19 19:43 .
								drwxrwxrwt. 24 root root 4096 4月  19 19:57 ..
								-rw-r-----.  1 root root   18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 root root  193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 root root  231 4月  19 19:43 .bashrc
								drwxr-----.  4 root root   39 4月  19 19:43 .mozilla

                                引用（参考）修改
								[root@bogon tmp]# ll a
								-rwxrw-rw-. 1 tom tom 0 4月  19 19:16 a
								[root@bogon tmp]# chown -R --reference=a /tmp/skel/
								[root@bogon tmp]# ll -a skel/
								总用量 16
								drwxr-----.  3 tom  tom    78 4月  19 19:43 .
								drwxrwxrwt. 24 root root 4096 4月  19 20:02 ..
								-rw-r-----.  1 tom  tom    18 4月  19 19:43 .bash_logout
								-rw-r-----.  1 tom  tom   193 4月  19 19:43 .bash_profile
								-rw-r-----.  1 tom  tom   231 4月  19 19:43 .bashrc
								drwxr-----.  4 tom  tom    39 4月  19 19:43 .mozilla
              

        思考：用户对目录有写权限，但对目录下的文件没有写权限时，
        （1）能否修改目录下的文件？   不能。
        （2）能否删除目录下的文件？   可以

        umask:文件权限反向掩码，遮罩码;
            文件：
                666-umask
            目录：
                777-umask
            注意：之所以文件用666去减，表示文件默认不能拥有执行权限；如果减得的结果中有执行权限，则需要将其加1；
                umask:023
                    666-023=643+1=644
                    777-023=754

            umask命令：
                umask:   查看当前umask
                umask  MASK:设置umask

            注意：此类设定仅对当前shell进程有效；



    练习：完成以下任务

    1、新建系统组mariadb,新建系统用户mariadb,属于mariadb组，要求没有家目录，且shell为/sbin/nologin,尝试root切换至用户，查看其命令条回复；

		[root@bogon ~]# groupadd mariadb -g 520
		[root@bogon ~]# useradd mariadb -u 520 -g 520 -M -s /sbin/nologin
		[root@bogon ~]# tail -1 /etc/passwd
		mariadb:x:520:520::/home/mariadb:/sbin/nologin
		[root@bogon ~]# tail -1 /etc/group
		mariadb:x:520:
		[root@bogon ~]# ls /home
		archlinux  docker  dockeruser1  fedora  gentoo  jacky  k8s  keystone  mogilefs  openstack  slackware
		[root@bogon ~]# su mariadb
		This account is currently not available.
	
	2、新建GID为4000的组mageedu,新建用户gentoo,要求其家目录为/user/gentoo,密码同用户名；

		[root@bogon ~]# groupadd mageedu -g 4000
		[root@bogon ~]# mkdir /users
		[root@bogon ~]# useradd -d /users/gentoo gentoo
		[root@bogon ~]# ll -a /users/
		总用量 0
		drwxr-xr-x.  3 root   root    20 4月  22 15:00 .
		dr-xr-xr-x. 18 root   root   237 4月  22 14:57 ..
		drwx------.  3 gentoo gentoo  78 4月  22 15:00 gentoo
		[root@bogon ~]# 
		[root@bogon ~]# passwd gentoo 
		更改用户 gentoo 的密码 。
		新的 密码：
		重新输入新的 密码：
		passwd：所有的身份验证令牌已经成功更新。

	3、新建用户fedora,其家目录为/users/fedora,密码同用户名；

		[root@bogon ~]# useradd fedora -d /users/fedora
		[root@bogon ~]# tail -1 /etc/passwd
		fedora:x:5013:5014::/users/fedora:/bin/bash
		[root@bogon ~]# ls /users
		fedora  gentoo
		[root@bogon ~]# passwd fedora 
		更改用户 fedora 的密码 。
		新的 密码：
		无效的密码： 密码少于 8 个字符
		重新输入新的 密码：
		passwd：所有的身份验证令牌已经成功更新。

	4、新建用户www,其家目录为/users/www;删除www用户，但保留其家目录；

		[root@bogon ~]# useradd -d /users/www www
		[root@bogon ~]# ls -la /users/www/
		总用量 12
		drwx------. 3 www  www   78 4月  22 16:22 .
		drwxr-xr-x. 5 root root  45 4月  22 16:22 ..
		-rw-r--r--. 1 www  www   18 8月   3 2017 .bash_logout
		-rw-r--r--. 1 www  www  193 8月   3 2017 .bash_profile
		-rw-r--r--. 1 www  www  231 8月   3 2017 .bashrc
		drwxr-xr-x. 4 www  www   39 3月  19 14:25 .mozilla
		[root@bogon ~]# userdel www
		[root@bogon ~]# ls -la /users/www/
		总用量 12
		drwx------. 3 5014 5015  78 4月  22 16:22 .
		drwxr-xr-x. 5 root root  45 4月  22 16:22 ..
		-rw-r--r--. 1 5014 5015  18 8月   3 2017 .bash_logout
		-rw-r--r--. 1 5014 5015 193 8月   3 2017 .bash_profile
		-rw-r--r--. 1 5014 5015 231 8月   3 2017 .bashrc
		drwxr-xr-x. 4 5014 5015  39 3月  19 14:25 .mozilla

	5、为用户gentoo和fedor新增附加组mageedu；
		[root@bogon ~]# usermod -G mageedu gentoo
		[root@bogon ~]# usermod -G mageedu fedora 
		[root@bogon ~]# tail -3 /etc/group
		mageedu:x:4000:gentoo,fedora
		gentoo:x:5013:
		fedora:x:5014:



	6、复制目录/var/log至/tmp目录，修改/tmp/log及其内部的所有文件的属组为mageedu,并让属组对目录本身拥有写权限；

		[root@bogon ~]# cp -r /var/log /tmp
		[root@bogon ~]# chown -R :mageedu /tmp/log
		[root@bogon ~]# ll -a /tmp/log
		总用量 7052
		drwxr-xr-x. 20 root mageedu    4096 4月  22 16:58 .
		drwxrwxrwt. 24 root root       4096 4月  22 16:58 ..
		drwxr-xr-x.  2 root mageedu     204 4月  22 16:58 anaconda
		drwx------.  2 root mageedu      23 4月  22 16:58 audit
		-rw-------.  1 root mageedu       0 4月  22 16:58 boot.log
		-rw-------.  1 root mageedu   26974 4月  22 16:58 boot.log-20190412
		.
		.
		.
		
		root@bogon ~]# chmod g+w /tmp/log/
		[root@bogon ~]# ls -la /tmp/log
		总用量 7052
		drwxrwxr-x. 20 root mageedu    4096 4月  22 16:58 .
		drwxrwxrwt. 24 root root       4096 4月  22 17:06 ..
		drwxr-xr-x.  2 root mageedu     204 4月  22 16:58 anaconda
		drwx------.  2 root mageedu      23 4月  22 16:58 audit
		-rw-------.  1 root mageedu       0 4月  22 16:58 boot.log
		-rw-------.  1 root mageedu   26974 4月  22 16:58 boot.log-20190412
		.
		.
		.


    install命令：
          install - copy files and set attributes--复制文件并设置属性
       
       单源复制：
          install [OPTION]... [-T] SOURCE DEST
       多源复制：
          install [OPTION]... SOURCE... DIRECTORY...
          install [OPTION]... -t DIRECTORY SOURCE...
       创建目录：   
          install [OPTION]... -d DIRECTORY...

       
       常用选项：
           -m, --mode=MODE: 设定目标文件权限，默认为755
           -o, --owner=OWNER: 设定目标文件属主;
           -g, --group=GROUP: 设定目标文件属组;


            example.
					[root@bogon tmp]# install /etc/inittab /tmp
					[root@bogon tmp]# ls -l inittab 
					-rwxr-xr-x. 1 root root 511 4月  19 20:37 inittab
					[root@bogon tmp]# ls -l /etc/inittab 
					-rw-r--r--. 1 root root 511 8月   4 2017 /etc/inittab
					[root@bogon tmp]# rm inittab 
					rm：是否删除普通文件 "inittab"？y
					[root@bogon tmp]# install -m 640 /etc/init
					init.d/  inittab  
					[root@bogon tmp]# install -m 640 /etc/inittab /tmp
					[root@bogon tmp]# ls -l inittab 
					-rw-r-----. 1 root root 511 4月  19 20:42 inittab
					[root@bogon tmp]# install -o jacky -g docker /etc/inittab /root
					[root@bogon tmp]# ls -l /root/inittab 
					-rwxr-xr-x. 1 jacky docker 511 4月  19 20:44 /root/inittab

					-d选项创建目录
					[root@bogon tmp]# install -d hello

					[root@bogon tmp]# ll -d hello
					drwxr-xr-x. 2 root root 6 4月  19 20:45 hello



       mktemp命令:   
                           mktemp - create a temporary file or directory 创建临时文件或临时目录

               mktemp [OPTION]... [TEMPLATE]
                                                     TEMPLATE must contain at least 3 consecutive 'X's in last component（模板文件名中至少包含3个X）

                             -d  --directory 创建临时目录
                             -u  --dry-run   仅做测试，不会实际创建文件

                  注意：mktemp会将创建的临时文件名直接返回，因此，可直接通过命令引用保存起来；


     博客作业：用户及权限管理



